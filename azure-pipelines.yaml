trigger:
- main

variables:
  vmImageName: 'myPackerImage'
  webAppName: 'myApplication-AppService'
  python.version: '3.7.6'
  azureServiceConnectionId: 'myserviceconnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'Test'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
  #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'


    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
         Arguments: 
         InstallTerraform: true
         UseAzureSub: true
         ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
         ConnectedServiceNameARM: 'myserviceconnection'
         ManageState: false

         provider: 'azurerm'
         command: 'init'
         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
         backendServiceArm: '$(azureServiceConnectionId)'
         backendAzureRmResourceGroupName: 'tfstatebb8'
         backendAzureRmStorageAccountName: 'tfstatebb8'
         backendAzureRmContainerName: 'tfstatebb8'
         backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    - task: InstallSSHKey@0
      inputs:
         knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC3cNDJ7MUZw/iaeXBW2fHRXkqNeqNL+bFTsjjMYH48T2VFpEO6WRajpSE7BbQwMCUIhRb2njuREoj1X7OMvoJlS6VUI6SF7aamPQMi7rbHn69N7PNmcqHKBau4CLIcGcSksNEa2mT6LEYaAZXjSj4whhJKdxvZ0UO/hUScVUU/ji4zd4Nd61f7SadKBRJTIgh79wAE3hvAoY3M4pUAdILbpZeeoup7EVr4h1TMh3dUzHFxvcAPoE8A0NxLtsbKKXlHecMiRSClvdXQ/uI3kINkpZgSD7Z2JGQDNKulFt+VQEwkghLhvO37mSoDZcGdMp7OHPad1NVSGEJhTFLLmkr7EtVzHgulF9YPu5u4EL6zsS02mJcbaIW29AlgrLBoJMCfgxM/PqFETKnt9HWg1Tynd6HjEfg5qvhYVGr+e+Pfk6lHAhRDp1bRbEDtP0B6NmXPKbpERVLq7n8lBKYIPQPXwbxEJBqPzxi4frNhGwQe7N9ZiwnXnE/yMIG7bkmJVEM= birte@cc-20ab936-7c5cfcbf7f-ctwnw' # variable value
         sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC3cNDJ7MUZw/iaeXBW2fHRXkqNeqNL+bFTsjjMYH48T2VFpEO6WRajpSE7BbQwMCUIhRb2njuREoj1X7OMvoJlS6VUI6SF7aamPQMi7rbHn69N7PNmcqHKBau4CLIcGcSksNEa2mT6LEYaAZXjSj4whhJKdxvZ0UO/hUScVUU/ji4zd4Nd61f7SadKBRJTIgh79wAE3hvAoY3M4pUAdILbpZeeoup7EVr4h1TMh3dUzHFxvcAPoE8A0NxLtsbKKXlHecMiRSClvdXQ/uI3kINkpZgSD7Z2JGQDNKulFt+VQEwkghLhvO37mSoDZcGdMp7OHPad1NVSGEJhTFLLmkr7EtVzHgulF9YPu5u4EL6zsS02mJcbaIW29AlgrLBoJMCfgxM/PqFETKnt9HWg1Tynd6HjEfg5qvhYVGr+e+Pfk6lHAhRDp1bRbEDtP0B6NmXPKbpERVLq7n8lBKYIPQPXwbxEJBqPzxi4frNhGwQe7N9ZiwnXnE/yMIG7bkmJVEM= birte@cc-20ab936-7c5cfcbf7f-ctwnw'            # variable value
         sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    - task: DownloadSecureFile@1
      name: PubKey
      displayName: 'Download Public Key'
      inputs:
        secureFile: 'id_rsa.pub'

    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-var "public_key_path=$(public_key.secureFilePath)"'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'



- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'myserviceconnection'
              appName: 'mywebapp'
              appType: webApp
              package: $(Pipeline.Workspace)/<artifact>/<archiveFile>

  
    #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            inputs:
             script: |
              wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
              tar -xf apache-jmeter-5.2.1.tgz
              unzip -o $(Build.BuildId)-perftests.zip
              ./apache-jmeter-5.2.1/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
                 cat jmeter.log                                                                           # ToDo: Write your commands
                workingDirectory: '$(System.DefaultWorkingDirectory)'#(Pipeline.Workspace)/<artifact>            # ToDo: Use the artifact name from the task above
              
    #--------------------------------------------#  
    # Selenium | Functional UI Tests
    # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name:        'Test'
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-ui-tests     # ToDo: Change/provide a name
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/testuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/testuser/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/testuser/app
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."
