trigger:
- main

variables:
  vmImageName: 'myimage_gallery'
  webAppName: 'mywebappBBfinal-AppService' #'mywebappBBfinal'
  python.version: '3.7.6'
  azureServiceConnectionId: 'myserviceconnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'Test'

stages:
- stage: Build
  jobs:
  - job: Build
    pool: 
      VMimage: ubuntu-20.04
      
    steps:
    #- task: Bash@3
    #  displayName: 'Install Postman & Newman'
    #  inputs:
     #  targetType: 'inline'
     #  script: |
     #     #! /bin/bash
     #     pwd
  #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'


    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
         Arguments: 
         InstallTerraform: true
         UseAzureSub: true
         ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
         ConnectedServiceNameARM: 'ConnectedServiceNameARM'
         ManageState: false

         provider: 'azurerm'
         command: 'init'
         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
         backendServiceArm: 'myserviceconnection'
         backendAzureRmResourceGroupName: 'tfstatebb8'
         backendAzureRmStorageAccountName: 'tfstatebb8'
         backendAzureRmContainerName: 'tfstatebb8'
         backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'myserviceconnection'

    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        #commandOptions: '-var "public_key_path=$(public_key.secureFilePath)"'
        environmentServiceNameAzureRM: 'myserviceconnection'

    #- task: Bash@3
    #  displayName: 'Install Postman & Newman'
    #  inputs:
     #  targetType: 'inline'
     #  script: |
     #     #! /bin/bash
     #     pwd

    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    #- task: CmdLine@2
    #  displayName: Run Regression Tests
   #   continueOnError: true
    #  inputs:
    #    script: 'newman run StarterAPIs.json'
     #   workingDirectory: 'starter-code/automatedtesting/postman'         

              
    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    
    #- task: ArchiveFiles@2
    #  displayName: 'Archive FakeRestAPI'
    #  inputs:
     #   rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
    #    includeRootFolder: false
     #   archiveType: 'zip'
     #   archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    #- publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    #  displayName: 'Upload fakerrestapi Package'
    #  artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Archive Fakerestapi'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi/' #'$(Build.BinariesDirectory)/$(Build.BuildID)-fakerestapi.zip'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    #- task: ArchiveFiles@2
     # inputs:
      #  rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium' #'$(Build.BinariesDirectory)/$(Build.BuildID)-automatedtests.zip'
     #   includeRootFolder: false
      #  archiveType: 'zip'
      #  archiveFile: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
      #  replaceExistingArchive: true
    #- upload: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
   #   artifact: selenium

- stage: WebAppDeployment
  displayName: Web App Deployment
  jobs:
  - deployment: FakeRestAPI
    environment:
          name: 'Test'
          #resourceType: VirtualMachine
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'myserviceconnection'
              appType: webAppLinux
              appName: 'mywebappBBfinal-AppService'
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip #'$(System.DefaultWorkingDirectory)/fakerestapi/fakerestapi.zip'
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'myserviceconnection'
              appName: 'mywebappBBfinal-AppService' #'mywebappBBfinal'
              appType: 'webAppLinux'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                 echo 'FakeRestAPI Running'
  #- deployment: VMDeploy
  #  displayName: Deploy VM
   # environment:
   #   name: 'Test VM'
   #   resourceType: VirtualMachine
    #strategy:
    # runOnce:
    #   deploy:
     #   steps:
          
               
  
    #--------------------------------------------#    
          # Run JMeter test suite against the App Service
       #   - task: Bash@3
    #  displayName: 'Install Postman & Newman'
    #  inputs:
     #  targetType: 'inline'
     #  script: |
     #     #! /bin/bash
     #     pwd

    
- stage: Jmeter
  displayName: JMeter Test
  jobs:
  - job: JMeterTest
    displayName: JMeterTests
    steps:
    - task: Bash@3
      inputs:
        script: |
          wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
          tar -xf apache-jmeter-5.2.1.tgz
          unzip -o $(Build.BuildId)-perftests.zip
          ./apache-jmeter-5.2.1/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
          cat jmeter.log                                                                           # ToDo: Write your commands
          workingDirectory: '$(System.DefaultWorkingDirectory)'#(Pipeline.Workspace)/<artifact>            # ToDo: Use the artifact name from the task above
              
    #--------------------------------------------#  
    # Selenium | Functional UI Tests
    # ToDo: 
  - job:
    displayName: Selenium Tests
   # steps: 
    #- publish: $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py
    #  artifact: selenium-python-file
   # - download: current
    #  artifact: selenium-python-file
    environment:
      name:        'Test'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-ui-tests     # ToDo: Change/provide a name
          - task: Bash@3
            displayName: 'Run Selenium Test'
            inputs:
              targetType: 'inline'
              script: |
                pwd
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                sudo pip3 install -U selenium
                wget https://chromedriver.storage.googleapis.com/91.0.4472.101/chromedriver_linux64.zip
                unzip chromedriver_linux64.zip
                rm -rf chromedriver_linux.zip
                chromium-browser -version
                chromedriver --version
                sudo mkdir -p /var/logs/seleniumlogfile.txt
                sudo chmod 775 /var/logs/seleniumlogfile.txt
                sudo python3 -u $(Pipeline.Workspace)/selenium-python-file/login.py 2>&1 | sudo tee -a /var/logs/seleniumlogfile.txt
                cd $(System.DefaultWorkingDirectory)
                mkdir -p logs/selenium
                pwd
                cat seleniumlog.txt
                ls -la  
- stage: Postman
  displayName: Postman Test
  jobs:
  - job: PostmanTest
    displayName: PostmanTests
    steps:
      - task: Bash@3
        displayName: 'Run Postman/Newman Tests'
        inputs:
          targetType: 'inline'
          script: |
            sudo npm install -g newman reporter
            echo 'Starting Tests...'
            echo 'Running Regression Test'
            newman run automatedtesting/postman/RegressionTest.postman_collection.json  --delay-request 12000 --reporters cli,junit --suppress-exit-code
            echo 'Running Data Validation Test'
            # newman run automatedtesting/postman/ValidationTest.postman_collection.json  --delay-request 12000 --reporters cli,junit --suppress-exit-code
      - task: PublishTestResults@2
        displayName: 'Publish Postman Newman Results **/newman-*.xml'
        condition: always()
        inputs:
            testResultsFormat: 'JUnit'
            testRunTitle: Data and Regression Tests
            testResultsFiles: '**/newman-*.xml'     
#- stage: final
 # jobs:
 # - job: Destroy
 #   displayName: Terraform Destroy
 #   pool:
 #     vmImage: 'myimage_gallery'
 #   steps:
  #  - task: TerraformCLI@0
   # inputs:
   #  command: 'destroy'
   #  environmentServiceName: 'project(2d04f73e-87e7-4ffd-aa6f-c28d4b64c42b)'
    # allowTelemetryCollection: true
    #inputs:
    #  command: 'destroy'
     # workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments
    #  environmentServiceName: 'myserviceconnection'
      #secureVarsFile: 'terraform.tfvars'

