trigger:
- main

variables:
  vmImageName: 'myimage_gallery'
  webAppName: 'mywebappBBfinal'
  python.version: '3.7.6'
  azureServiceConnectionId: 'myserviceconnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'Test'

stages:
#- stage: Provision
 # jobs: 
 #  - job: provision_infrastructure
 #    displayName: Provision infrastructure
 #    pool:
  #     vmImageName: myimage_gallery
  #   steps:
  #   - task: DownloadSecureFile@1
  #     inputs:
  #        secureFile: .env
  #   - task: InstallSSHKey@0
  #     inputs:
  #        knownHostsEntry: 'known_host'
    #      sshPublicKey: '$(ssh_pub_key)' 
   #       sshKeySecureFile: 'id_rsa'
#     - task: InstallSSHKey@0
    #   inputs:
     #     knownHostsEntry: 'known_hosts'
    #      sshPublicKey: '$(ssh_pub_key)'
     #     sshKeySecureFile: 'id_rsa'
   
    # steps:
      # - task: DownloadSecureFile@1
        # inputs: 
         #  secureFile: 'id_rsa.pub'
     #  - task: InstallSSHKey@0
         #inputs:
         #  knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDJKJ9hzTdhN2ZGxLc9p8AuvP1zBogKFgXLxs27yvAwrNZK0QpiaKpv8mD5vCtCIdOI+ssSyoMqw6/BjheUD1KsbLSzmG9vlTM9NHWekrPpaUI2U2aXErMLNEcvqTyln34w+Hlaz9O8ME3H5g1vckWPOFjTSh92f0//amHk4yZ5ETR7RK2GbpJ+5GpZX7AyRzHofsM+dlR1S6v/Q+iRxtYmG0qmDfjx1Jy5NVndp1Kd6qtYpLa7YkSqPaZESt9TEZ5xdck4a7MVBuPZn4DK0MV6jHQ1omv8/wlwRh+0wmfnNU94StxDPHaGYamtMyr7pLpusUNUYXM/2yVDqZtWJJ1DBIzYJc/0rVUqxSfGp76HT0eHYQ0quFtC/WHWzxTlNuIFaPRYK0t72DHKDBLS7Vv/bXti9E8bYs+xONwcxef9Sz7UDvoBwvBnX8gM2jkqk/WLiFfm/ZavZjDtDb39JpXE7+35vaZyicgmipp7Kpzxxn/rlD1zl6DYzZ885ASl3C0= generated-by-azure' # variable value
         #  sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDJKJ9hzTdhN2ZGxLc9p8AuvP1zBogKFgXLxs27yvAwrNZK0QpiaKpv8mD5vCtCIdOI+ssSyoMqw6/BjheUD1KsbLSzmG9vlTM9NHWekrPpaUI2U2aXErMLNEcvqTyln34w+Hlaz9O8ME3H5g1vckWPOFjTSh92f0//amHk4yZ5ETR7RK2GbpJ+5GpZX7AyRzHofsM+dlR1S6v/Q+iRxtYmG0qmDfjx1Jy5NVndp1Kd6qtYpLa7YkSqPaZESt9TEZ5xdck4a7MVBuPZn4DK0MV6jHQ1omv8/wlwRh+0wmfnNU94StxDPHaGYamtMyr7pLpusUNUYXM/2yVDqZtWJJ1DBIzYJc/0rVUqxSfGp76HT0eHYQ0quFtC/WHWzxTlNuIFaPRYK0t72DHKDBLS7Vv/bXti9E8bYs+xONwcxef9Sz7UDvoBwvBnX8gM2jkqk/WLiFfm/ZavZjDtDb39JpXE7+35vaZyicgmipp7Kpzxxn/rlD1zl6DYzZ885ASl3C0= generated-by-azure'            # variable value
         #  sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
           
- stage: Build
  jobs:
  - job: Build
    pool: 
      VMimage: ubuntu-20.04
      
    steps:
    - task: Bash@3
      displayName: 'Install Postman & Newman'
      inputs:
       targetType: 'inline'
       script: |
          #! /bin/bash
          pwd
  #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'


    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
         Arguments: 
         InstallTerraform: true
         UseAzureSub: true
         ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
         ConnectedServiceNameARM: 'ConnectedServiceNameARM'
         ManageState: false

         provider: 'azurerm'
         command: 'init'
         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
         backendServiceArm: 'myserviceconnection'
         backendAzureRmResourceGroupName: 'tfstatebb8'
         backendAzureRmStorageAccountName: 'tfstatebb8'
         backendAzureRmContainerName: 'tfstatebb8'
         backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'myserviceconnection'

    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        #commandOptions: '-var "public_key_path=$(public_key.secureFilePath)"'
        environmentServiceNameAzureRM: 'myserviceconnection'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    
    #- task: ArchiveFiles@2
    #  displayName: 'Archive FakeRestAPI'
    #  inputs:
     #   rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
    #    includeRootFolder: false
     #   archiveType: 'zip'
     #   archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    #- publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    #  displayName: 'Upload fakerrestapi Package'
    #  artifact: drop-fakerestapi
    
    - task: ArchiveFiles@2
      displayName: 'Archive Automation Tests'
      inputs:
        rootFolderOrFile: 'automatedtesting' 
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip' 
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip'
      displayName: 'Upload Package'
      artifact: drop

- stage: WebAppDeployment
  displayName: Web App Deployment
  jobs:
  - deployment: FakeRestAPI
    environment:
          name: 'TEST'
          resourceType: VirtualMachine
    pool:
      vmImage: 'ubuntu-20.04'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'myserviceconnection'
              appType: 'webAppLinux'
              appName: 'mywebappBBfinal'
              package: '$(System.DefaultWorkingDirectory)/**/*.zip'
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'myserviceconnection'
              appName: 'mywebappBBfinal'
              appType: 'webAppLinux'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
          - task: Bash@3
           inputs:
            targetType: 'inline'
            script: |
                 echo 'FakeRestAPI Running'
-deployment:VMDeploy
 displayName: Deploy VM
 environment:
    name: 'Test VM'
    resourceType: VirtualMachine
 strategy:
   runOnce:
      deploy:
        steps:
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |           
              #! /bin/bash
                
              sudo apt-get upgrade -y
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              pip3 install selenium
              cd ~/
              DIR=/home/testuser/app
              if [ ! -d "$DIR" ]; then
                mkdir app
              fi
              mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
              cd app
              unzip -o $(Build.BuildId)-uitests.zip
              FILE=/home/testuser/app/chromedriver_linux64.zip
              if [ ! -f "$FILE" ]; then
                  LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                  wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                  unzip -o chromedriver_linux64.zip
                  sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
              fi
              export PATH=$PATH:/home/testuser/app
              echo "Starting Selenium Tests"
              python3 add_remove_from_cart.py >> selenium.log
              echo "Completed Selenium Tests. Check selenium.log for results."
  
    #--------------------------------------------#    
          # Run JMeter test suite against the App Service
- stage: Jmeter
  displayName: JMeter Test
  jobs:
  - job: JMeterTest
    displayName: JMeterTests
    steps:
    - task: CmdLine@2
      inputs:
      script: |
          wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
          tar -xf apache-jmeter-5.2.1.tgz
          unzip -o $(Build.BuildId)-perftests.zip
          ./apache-jmeter-5.2.1/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
        cat jmeter.log                                                                           # ToDo: Write your commands
        workingDirectory: '$(System.DefaultWorkingDirectory)'#(Pipeline.Workspace)/<artifact>            # ToDo: Use the artifact name from the task above
              
    #--------------------------------------------#  
    # Selenium | Functional UI Tests
    # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name:        'Test'
      resourceType: VirtualMachine
    pool:
      vmImage: 'myimage_gallery'
     # tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-ui-tests     # ToDo: Change/provide a name
            
    
- stage: final
  jobs:
  - job: Destroy
    displayName: Terraform Destroy
    pool:
      vmImage: 'myimage_gallery'
    steps:
    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0 
      inputs:
        command: 'destroy'
        workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments
        environmentServiceName: 'myserviceconnection'
        #secureVarsFile: 'terraform.tfvars'

