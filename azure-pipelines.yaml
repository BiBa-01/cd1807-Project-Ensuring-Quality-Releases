trigger:
- main

variables:
  vmImageName: 'myPackerImage'
  webAppName: 'myApplication-AppService'
  python.version: '3.7.6'
  azureServiceConnectionId: 'myserviceconnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'Test'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
  #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: 'Terrafom installation'
    inputs:
      terraformVersion: '1.2.9'


    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    displayName: 'Terrafom init'
    inputs:
       Arguments: 
        InstallTerraform: true
        UseAzureSub: true
        ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
        ConnectedServiceNameARM: 'myserviceconnection'
        ManageState: false

        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'tfstatebb8'
        backendAzureRmStorageAccountName: 'tfstatebb8'
        backendAzureRmContainerName: 'tfstatebb8'
        backendAzureRmKey: 'test.terraform.tfstate'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    displayName: Terraform validate
    inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
  - task: InstallSSHKey@0
    inputs:
        knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2cV+EipxVv7wSPsQZQ56DmfCYInlWJO4DtoWrdHQLZh/GkqigS8OWxqjv8PwySv2KjDnFJNd2rJAiArYxlMUa75jtLLVowbwycm4mfuy2rZd2+UOTwCOQl8Q7oQEypVuv69ZS0iIBX3i9qZh4cSXpqMXZVFw0mSbBCWhiZVpK0EvctrEl2501gDA4RMn3gBsbox2zjQn+8nTrOIcs8POu0CN+TqXVuuzwgO2Qi8ZdsqP94cFysTjehC5ejp04z1dmQV06TmT7Ijv7KwOWoQlIy8MA6sx3gyqPKIP0rq42GN1qsh85hRU86A6+B5AVbox51jweShTH/tIWMmcjIsS26brRhgjMR6WxENsoekZLO0MLxEOokJIulrmjYIY7nJ07/0ji2aHImQJByB1nqYiaXcgMGyM/Q26Kc44iyZ3bNGLtHrFmGD6K4jqyYbR6VuHN0BQ1dIsqPT7nOexiWPza8snjjci/oETvkdw04/vExhFMc7GojTdz3qIJxh2qeiM= odl_user@cc-ec83fb63-5494dfcdd9-96wmh' # variable value
        sshPublicKey: '$(PubKey)'            # variable value
        sshKeySecureFile: 'id_rsa.pub' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
  - task: DownloadSecureFile@1
    name: PubKey
    displayName: 'Download Public Key'
    inputs:
       secureFile: 'id_rsa.pub'

    
    # Run Terraform Apply
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    displayName: Terraform apply
    inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-var "public_key_path=$(public_key.secureFilePath)"'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'



- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '2d04f73e-87e7-4ffd-aa6f-c28d4b64c42b'
              appName: 'mywebapp'
              appType: webApp
              package: $(Pipeline.Workspace)/<artifact>/<archiveFile>

  
    #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            inputs:
             script: |
              wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
              tar -xf apache-jmeter-5.2.1.tgz
              unzip -o $(Build.BuildId)-perftests.zip
              ./apache-jmeter-5.2.1/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
                 cat jmeter.log                                                                           # ToDo: Write your commands
                workingDirectory: '$(System.DefaultWorkingDirectory)'#(Pipeline.Workspace)/<artifact>            # ToDo: Use the artifact name from the task above
              
    #--------------------------------------------#  
    # Selenium | Functional UI Tests
    # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name:        'Test'
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-ui-tests     # ToDo: Change/provide a name
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/testuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/testuser/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/testuser/app
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."
